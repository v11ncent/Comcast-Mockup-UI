---
import Plans from "./Plans.astro";
import ContractBanner from "../components/ContractBanner.astro";
import internetPlan from "../assets/internet-plan.svg";
import icon from "../assets/x.svg";
import UpsellBanner from "../components/UpsellBanner.astro";
---

<section id="internet" class="accordion" data-expanded="false">
  <header class="summary">
    <div class="heading-area">
      <img src={internetPlan} alt="" aria-hidden="true" class="header-image" />
      <h2 class="heading">Internet</h2>
    </div>
    <div class="button-area">
      <p class="text">Open</p>
      <img src={icon} alt="" aria-hidden="true" class="accordion-icon" />
    </div>
  </header>
  <div class="details-container">
    <div class="details">
      <div class="inner">
        <header>
          <h3>Choose your speed</h3>
        </header>
        <ContractBanner />
        <Plans />
        <UpsellBanner />
      </div>
    </div>
  </div>
</section>

<script>
  const accordions = document.querySelectorAll<HTMLElement>(".accordion");

  accordions.forEach((accordion) => {
    const summary = accordion.querySelector(".summary") as HTMLElement;

    summary.addEventListener("click", (event) => {
      if (accordion.classList.contains("hover")) {
        accordion.classList.remove("hover");
      }

      const button = accordion.querySelector(".accordion-icon") as HTMLElement;
      const buttonText = accordion.querySelector(
        ".button-area .text"
      ) as HTMLElement;
      const detailsContainer = accordion.querySelector(
        ".details-container"
      ) as HTMLElement;
      const details = accordion.querySelector(".details") as HTMLElement;
      const expanded = accordion.getAttribute("data-expanded");

      if (expanded === "false") {
        accordion.setAttribute("data-expanded", "true");
        accordion.classList.add("expanded");
        accordion.scrollIntoView({
          behavior: "smooth",
        });
        summary.classList.add("expanded");
        buttonText.textContent = "Close";
        button.classList.add("expanded");
        detailsContainer.classList.add("expanded");
        details.classList.add("expanded");
      } else {
        accordion.setAttribute("data-expanded", "false");
        accordion.classList.remove("expanded");
        summary.classList.remove("expanded");
        buttonText.textContent = "Open";
        button.classList.remove("expanded");
        detailsContainer.classList.remove("expanded");
        details.classList.remove("expanded");
      }
    });

    accordion.addEventListener("mouseover", (event) => {
      if (accordion.classList.contains("expanded")) return;

      accordion.classList.add("hover");
    });

    accordion.addEventListener("mouseout", (event) => {
      accordion.classList.remove("hover");
    });
  });
</script>

<style lang="scss">
  @use "../styles/tokens/_tokens.scss" as t;
  $transition: all 300ms linear;
  $transform-origin: 50% 50% 0;

  .accordion {
    max-width: 68.125rem;
    box-shadow: rgb(0, 0, 0) 0rem 0rem 0rem 0rem;
    border-radius: 0.5rem;
    background-color: t.$clr-accordion;
    transform-origin: $transform-origin;
    transition: $transition;
    overflow: visible;

    &.expanded {
      max-width: 100%;
      width: 100%;
      background-color: white;
    }

    &.hover {
      max-width: 70rem;
      width: 100%;
      box-shadow: rgba(0, 0, 0, 0.25) 0rem 1.25rem 0.625rem -0.9375rem;
      background-color: white;
    }
  }

  .summary {
    display: flex;
    padding: t.$pd-accordion;
    transition: $transition;
    transform-origin: $transform-origin;
    cursor: pointer;

    &.expanded {
      border-bottom: 0.0625rem solid lightgrey;
    }
  }

  .summary .heading-area,
  .summary .button-area {
    display: flex;
    align-items: center;
  }

  .summary .heading-area {
    margin-right: auto;
  }

  .summary .header-image {
    margin-right: clamp(1rem, 2vw, 2.5rem);
    height: clamp(1.5rem, 2.5vw, 2.5rem);
    width: clamp(1.5rem, 2.5vw, 2.5rem);
  }

  .summary .heading {
    font-size: clamp(1.5rem, 1.375rem + 0.78125vw, 2rem);
    line-height: clamp(2.375rem, 1.875rem + 0.78125vw, 2.5rem);
    letter-spacing: clamp(
      -0.025rem,
      -0.0052rem + -0.030864197530864196vw,
      -0.0125rem
    );
    font-weight: 700;
  }

  .summary .text {
    color: t.$clr-accent;
    margin-right: 0.75rem;
  }

  .summary .accordion-icon {
    width: 1.2rem;
    height: 1.2rem;
    transition: $transition;
    transform: rotate(45deg);

    &.expanded {
      transform: rotate(-45deg);
    }
  }

  .details-container {
    display: grid;
    grid-template-rows: 0fr;
    transition: grid-template-rows 500ms;
    overflow: hidden;

    &.expanded {
      grid-template-rows: 1fr;
    }
  }

  .details {
    overflow: hidden;
    transition: $transition;
    opacity: 0;
    transform: scale(1, 0);
    transform-origin: top;

    .inner {
      padding: t.$pd-accordion;
    }

    &.expanded {
      opacity: 1;
      transform: scale(1, 1);
    }

    header {
      font-size: clamp(1rem, 0.875rem + 0.78125vw, 1.25rem);
      line-height: clamp(1.875rem, 1.375rem + 0.78125vw, 2rem);
      letter-spacing: -0.0125rem;
    }
  }
</style>
