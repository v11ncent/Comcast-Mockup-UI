---
import PlanCard from "./PlanCard.astro";
import internetPlan from "../assets/internet-plan.svg";
import x from "../assets/x.svg";
---

<section id="internet" class="accordion" data-expanded="false">
  <header class="summary">
    <div class="heading-area">
      <img src={internetPlan} alt="" aria-hidden="true" class="header-image" />
      <h2 class="heading">Internet</h2>
    </div>
    <div class="button-area">
      <p class="button-text">Open</p>
      <button class="button-toggle">
        <img src={x} alt="" aria-hidden="true" />
      </button>
    </div>
  </header>
  <div class="details-container">
    <div class="details">
      <div class="inner">
        <header>
          <h3>Choose your speed</h3>
        </header>
        <div class="details-banner">
          <p class="terms">These plans come with a contract</p>
          <div class="button-area">
            <p class="button-text">Term contract</p>
            <button></button>
          </div>
        </div>
        <ul class="plans">
          <li>
            <PlanCard />
          </li>
          <li>
            <PlanCard />
          </li>
          <li>
            <PlanCard />
          </li>
          <li>
            <PlanCard />
          </li>
          <li>
            <PlanCard />
          </li>
          <li>
            <PlanCard />
          </li>
        </ul>
      </div>
    </div>
  </div>
</section>

<script>
  const accordions = document.querySelectorAll<HTMLElement>(".accordion");

  accordions.forEach((accordion) => {
    const summary = accordion.querySelector(".summary") as HTMLElement;

    summary.addEventListener("click", (event) => {
      const button = accordion.querySelector(".button-toggle") as HTMLElement;
      const buttonText = accordion.querySelector(".button-text") as HTMLElement;
      const detailsContainer = accordion.querySelector(
        ".details-container"
      ) as HTMLElement;
      const details = accordion.querySelector(".details") as HTMLElement;
      const expanded = accordion.getAttribute("data-expanded");

      if (expanded === "false") {
        accordion.setAttribute("data-expanded", "true");
        accordion.classList.add("expanded");
        accordion.scrollIntoView({
          behavior: "smooth",
        });
        summary.classList.add("expanded");
        buttonText.textContent = "Close";
        button.classList.add("expanded");
        detailsContainer.classList.add("expanded");
        details.classList.add("expanded");
      } else {
        accordion.setAttribute("data-expanded", "false");
        accordion.classList.remove("expanded");
        summary.classList.remove("expanded");
        buttonText.textContent = "Open";
        button.classList.remove("expanded");
        detailsContainer.classList.remove("expanded");
        details.classList.remove("expanded");
      }
    });
  });
</script>

<style lang="scss">
  @use "../styles/tokens/_tokens.scss" as t;
  $transition: all 300ms linear;
  $transform-origin: 50% 50% 0;

  .accordion {
    max-width: 62.5rem;
    width: 100%;
    box-shadow: rgb(0, 0, 0) 0rem 0rem 0rem 0rem;
    border-radius: 0.5rem;
    background-color: t.$clr-accordion;
    transform-origin: $transform-origin;
    transition: $transition;
  }

  .accordion.expanded,
  .accordion:hover {
    width: 102%;
    box-shadow: rgba(0, 0, 0, 0.25) 0rem 1.25rem 0.625rem -0.9375rem;
    background-color: white;
  }

  .accordion.expanded {
    max-width: 100%;
  }

  .summary {
    display: flex;
    padding: t.$pd-accordion;
    transition: $transition;
    transform-origin: $transform-origin;
    cursor: pointer;
  }

  .summary.expanded {
    border-bottom: 0.0625rem solid lightgrey;
  }

  .accordion .summary .heading-area,
  .accordion .summary .button-area {
    display: flex;
    align-items: center;
  }

  .accordion .summary .heading-area {
    margin-right: auto;
  }

  .accordion .summary .header-image {
    margin-right: 2.5rem;
    height: 2.5rem;
    width: 2.5rem;
  }

  .accordion .summary .heading {
    font-size: clamp(1.875rem, 1.375rem + 0.78125vw, 2rem);
    line-height: clamp(2.375rem, 1.875rem + 0.78125vw, 2.5rem);
    letter-spacing: clamp(
      -0.025rem,
      -0.0052rem + -0.030864197530864196vw,
      -0.0125rem
    );
    font-weight: 700;
  }

  .accordion .summary .button-text {
    color: t.$clr-accent;
    margin-right: 0.75rem;
  }

  .accordion .summary .button-toggle {
    background-color: transparent;
    border: transparent;
    width: 2rem;
    height: 2rem;
    transition: $transition;
    transform: rotate(45deg);

    &.expanded {
      transform: rotate(-45deg);
    }
  }

  .details-container {
    display: grid;
    grid-template-rows: 0fr;
    transition: grid-template-rows 500ms;
    overflow: hidden;

    &.expanded {
      grid-template-rows: 1fr;
    }
  }

  .details {
    overflow: hidden;
    transition: $transition;
    opacity: 0;
    transform: scale(1, 0);
    transform-origin: top;

    .inner {
      padding: t.$pd-accordion;
    }

    &.expanded {
      opacity: 1;
      transform: scale(1, 1);
    }

    header {
      font-size: clamp(1rem, 0.875rem + 0.78125vw, 1.25rem);
      line-height: clamp(1.875rem, 1.375rem + 0.78125vw, 2rem);
      letter-spacing: -0.0125rem;
    }
  }

  .details-banner {
    display: flex;
    align-items: center;
    justify-content: space-between;
    flex-wrap: wrap;
    margin: 2rem 0;
    padding: t.$pd-accordion;
    border-radius: 0.25rem;
    background-color: t.$clr-details-banner;

    .terms {
      font-weight: 700;
      line-height: 1.5;
    }

    .button-area {
      display: flex;
    }

    .button-text {
      margin-right: 1.5rem;
      font-size: 0.875rem;
      line-height: 1.25rem;
      letter-spacing: 0.0625rem;
      text-transform: uppercase;
    }

    button {
      display: none;
    }
  }

  .plans {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 5rem;
  }
</style>
